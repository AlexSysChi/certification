General hints:
    1. pay attention variables scope:
        *   local variable in the method can't be named with method parameter name (which is also local variable)
        *   local variables can't have ambiguity names even for outer-inner blocks (previous bullet generalizing)
        *   it's possible to have static (class) variable and instance variable with the same name - shadowing
        *   local variables declared in the block can't be used outside declaration block
    2.  static method aren't inherited - shadowing
    3.  instance members aren't accessible from static content unless class instantiation in such context
    4.  if both interface and class, implemented it, have similar name field, let's say x, and interface type reference
        store class object, than call such variable using interface reference will return value from interface

Exceptions:
    1.  Each try block must be followed by catch or finally block (or both)
    2.  When code try to convert string to a number (in case proper implementation) and string in inappropriate format
        than NumberFormatException (which extends IllegalArgumentException) will be thrown
    3.  Alternatives in a multi-catch statement cannot be related by subclassing:
        catch (NullPointerException | RuntimeException e) or vice versa (see MultiCatchExample)
    4.  Exception variable (declared in catch block) is implicitly final, and an attempt to reassign it will result in
        compilation error
    5.  If catch block try to catch some checked exception and compiler knows that try block will never produce it
        - compilation fails
    6.  Exception class has 5 constructors (one protected with two boolean parameters)
    7.  Order in catch block is important: if wider exception class goes first, than compilation
        fails because of unreachable exception: exception of shallow class has already been caught

Class construction:
    1.  The Only mandatory class component is a constructor.
        Even it wasn't implemented manually - compile will generate default one
    2.  Class names mustn't contain Java keywords
    3.  Top level class mustn't have [static, private, protected] modifiers
    4.  Inner classes have access to private members of enclosing class
    5.  Inner and static nested classes can be declared with private access modifiers,
        BUT method local and anonymous classes can't (Also not declared as public since it is never accessible outside the method.)
??? same situation with protected
    6.  Anonymous inner class can implement only one interface at a time.
        Also anonymous Inner class can extend a class or can implement an interface but not both at a time.
    7.  We cant write any constructor for anonymous Inner class because anonymous class does not have any name
        and while defining constructor class name and constructor name must be same
    8.  Method local classes have access only to effectively-final variables (like lambdas)
    9.  When subclass instantiated (skip static block here)
        *   first step - all init blocks and required constructors works in superclass
        *   second step - all init blocks and required constructors works in subclass

StringBuilder:
    1.  StringBuilder object sb could be placed in sout (sb.toString() will be called)
    2.  Default capacity is 16. If sb initialized with some string, capacity will be equal
        to 16 + length of string attribute
    3.  haven't concat method
    4.  insert(int offset, String str). insert should be equal to or less than the actual sb.length

Arrays:
    1.  length field for multidimensional array store size of 'first lay' array
    2.  there is no sort(T[] arr) method accepts 2D array, if such array provided - ClassCastException will
        be thrown, because method try to cast 1D array elements (which are 1D arrays) to Comparable and it's impossible
    3.  if pass null as a parameter in Arrays.sort(null) - NPE will be thrown (caused by: sort method uses index access)
    4.  array declaration like {1, 2, 3} can be used in array initialization only (), not in reassignment.
        But new int[] {1, 3} is ok for reassignment
    5.  if we declared and initialized arrays of int (int[] i = {1}), and after that try to assign it to
        long l = i; - compilation fails (because arrays know their types to store)
    6.  array size during initialization can be int not long

ArrayList:
    1.  default size of ArrayList is 10, but due to 'lazy actions' size of arrayList will be zero, until first element
        is put, after that size of arrayList will be equal 10 (until resizing if size wouldn't be enough)
    2.  Method remove(int index) - returns a value of removed element, but remove(Object o) - returns boolean

Arithmetic operations:
    1. remainder of the division will have the same sign as divided

Wrappers:
    1.  Wrappers can't wide from one to another. [ex. Float object couldn't be converted to Double implicitly]

    2.  Another situation with converting float to Double, here two step are required:
        float->double->Double, but when Java wides/wraps types - it is only one step will be implemented
        (in our example from float to double, but we need to wrap double to Double - it won't be implemented)
    3.  The equals methods of all wrapper classes first check if the two object are of same class or not.
        If not, they immediately return false.

Time:
    1.  LocalDateTime is immutable (https://docs.oracle.com/javase/8/docs/api/index.html)
        https://www.baeldung.com/java-8-date-time-intro

Variables:
    1.  final class/instance variables must be initialized (only once) before using:
        * static (class) - before class loaded (direct initialization or in static init block(s))
        * instance - before instance created (direct initialization, instance init block(s), constructors)
        * local - could be declared and initialized in different places, but before first using
    2.  local variable declaration:
        *   class variable (with static specifier) or instance variable could be shadowed by local variable declared in
            closure scope (method-block, any condition block). It also could be used in different blocks followed each other
        *   BUT local variables can't shadow each other (for instance, when one block is inside another)
        *   It's impossible to have class and instance variable with the sane name (I believe, because that we can use
            instance variable to refer class(static) varaible and in such a case - uncertainty will produce compile error)
    3.  hiding vs shadowing: https://dzone.com/articles/variable-shadowing-and-hiding-in-java

Polymorphism:
    1. instance of (see: InstanceOfExample)
        *   if subclass object assigned to superclass reference
        *   subclass object implements some interface
        *   than test superclass reference (actually containing subclass object) for
            instance of the some interface will result true
        CONCLUSION: if polymorphism is used, than instance of operator will see concrete subclass 'behaviour'
    2.  if superclass reference use to store subclasses - only methods declared at superclass level could be invoked,
        but functionality of such methods will be taken from subclass. i.e. version of overridden method defined by object type.
    3.  BUT overloaded method defined by reference type
    4.  If SuperClass and SubClass have variable with same name, and SuperClass reference is used to call such variable,
        than SuperClass version of variable is called (CHECK IT)
    5.  Let's say we have class A (parent) and class B (child). Both of classes have their own version of print() method.
        and in class A default constructor this method is called. And Tricky case with B class object construction:
        Note that method print() is overridden in class B. Due to polymorphism, the method to be executed is selected
        depending on the class of the actual object. Here, when an object of class B is created, first B's default
        constructor (which is not visible in the code but is automatically provided by the compiler because B does not
        define any constructor explicitly) is called. The first line of this constructor is a call to super(), which
        invokes A's constructor. A's constructor in turn calls print(). Now, print is a non-private instance method and
        is therefore polymorphic, which means, the selection of the method to be executed depends on the class of actual
        object on which it is invoked. Here, since the class of actual object is B, B's print is selected instead of A's
        print. At this point of time, variable i has not been initialized (because we are still in the middle of
        initializing A), so its default value i.e. 0 is printed

Method overriding:
    1.  private method can't be overridden (because they are belong to a class ONLY)
    2.  with declared checked exception: it's allowed to override such method without specifying that exception is possible,
        but if we use supertype reference, which is actually refer to a subtype, compiler thinks that we call method which is
        could throw an exception and in this case it will produce an compilation error. But if we use subtype reference
        for the same case, calling overridden method won't produce any compilation problem
    3.  Object class method can't be overridden in default interface method, because class version of the method has a
        higher priority that is why interface method of version would be unreachable. See details:
        1. https://stackoverflow.com/questions/24016962/java8-why-is-it-forbidden-to-define-a-default-method-for-a-method-from-java-lan/24026292
        2. http://www.lambdafaq.org/why-cant-default-methods-override-equals-hashcode-and-tostring/
        3. http://mail.openjdk.java.net/pipermail/lambda-dev/2013-March/008435.html

Type Casting:
    1.  If we try to cast a superclass object to a subclass one and superclass actually refers to superclass object,
        not on subclass one - ClassCastException will be thrown at runtime, but with successful compilation
    2.  System.out.println able to 'process' origin boolean value without any concatenation with some string

Interface:
    1.  Form Java 8 it is allowed to have non-abstract methods in interface (static and default ones),
        BUT there is a limitation: default interface method can't override ones from Object class.
        'Interface multiple inheritance rule': class declared method always wins
        CONCLUSION: interface default method can't override Object's ones - compilation will fail
    2.  Trying to override a static method with a non-static method (and vice-versa) in a class will result in a
        compilation error. Even in case of interfaces, a sub interface cannot override a default method with a static method.

Loops:
    1. in case of unreachable statements in loops (statements after continue without any conditions or inside while(false))
        - compilation fails

Reflection:
    1. getClass method return actual object, irrespective of the reference type

switch-case:
    1.  allowed types for switch:
        *   integers types (also wrappers) until int type size (inclusively) long not allowed
        *   Strings (syntax sugar based on hashcode using)
         *  enums
    2.  types for case:
        *   literals (integers, Strings)
        *   compile-time constants variables of allowed types (with final specifier and initialization in one string).
            Wrappers aren't allowed because they are evaluated at runtime
        *   enum
        *   arrays elements aren't allowed even in case array declared as final (it's not protect us from reassignment)
    3.  for String variables comparison method equals is used, not equalsIgnoreCase

unreachable statements:
    1. in if else(false) - will compile and run successfully, but pay close attention to the logic

equals method:
    1.  default implementations is comparing object references
    2.  overridden implementations usually check instanceof firstly

static:
    1.  static interface method could be be called only through interface method, but not
        through object reference (implements this interface). Don't work like static class methods.

number systems:
    1.  decimal (without prefix)            - 10 based: 0 1 2 3 4 5 6 7 8 9
    2.  octal (with o or O prefix)          - 8 based:  0 1 2 3 4 5 6 7
    3.  hexadecimal (with 0x or 0X prefix)  - 16 based: 0 1 2 3 4 5 6 7 8 9 A B C D E F
    4.  binary (with 0b or 0B prefix)       - 2 based: 0 1

    *   integer literal postfix l or L is allowed to use with any numeric system

equality check: == or equals
     1. == for primitive types comparing values
     2. == for reference types comparing reference equality
     3. == for comparing wrapper and primitive will un-box value from wrapper
     5. == can't be applied for different types
     4. equals (applicable only for reference types). Default implementation is ==. Overriden
        implementation usually starts with instanceof


assignment:
    double d = 10; - fine (one step widening int 10 -> double 10.0 )
    Double d = 10; - fail (because two step widening required: int 10 -> double 10.0 -> Double 10.0)